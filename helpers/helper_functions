import pandas as pd
import numpy as np
import yfinance as yf
import plotly.express as px
import statsmodels.api as sm
import pmdarima as pm
import warnings
from sklearn.metrics import mean_squared_error
import math
from statsmodels.tools.sm_exceptions import ConvergenceWarning
warnings.simplefilter('ignore', ConvergenceWarning)

def make_stock_data(stocks,feature):
    info_list=[]
    if feature == 'Close':
        # Close
        for stock in stocks:
            info = yf.Ticker(stock).history(period='max')[['Close']]
            info_list.append(info)
    elif feature == 'Change':
        # Day Change
        for stock in stocks:
            info = yf.Ticker(stock).history(period='max')[['Open','Close']]
            info = info.Open-info.Close
            info_list.append(info)
    else: print('give valid feature: Change or Close')

    combo = pd.concat(info_list,axis=1)
    combo.columns = stocks

    combo = combo.dropna()
    combo.index = pd.to_datetime(combo.index)
    return combo

def set_up_endog_exog(data,tt,stock):
        exs = [x for x in data.columns]
        exs.remove(stock)
        size = int(len(data)*tt)

        # shift endog up
        this_data = data.copy()
        this_data[stock] = this_data[stock].shift(-1) # automatically adds the na for tomoorw
        train, test = this_data[0:size],this_data[size:len(this_data)]
        print(f'columns in data: {this_data.columns}')
        train_endog = train[[stock]]
        test_endog = test[[stock]]
        test_endog_ = [x for x in test_endog.values]
        history_endog = [x for x in train_endog.values]

        train_exog = train[exs]
        test_exog = test[exs]
        test_exog_ = [x for x in test_exog.values]
        history_exog = [x for x in train_exog.values]

        actuals = data[stock]

        return history_endog,history_exog,test_exog_,test_endog_,actuals


def walking_sarimax(data,tt,params):
    walking_preds_list=[]
    j_preds=[]
    acts=[]
    order_ = params['order']
    seasonal_order_ = params['seasonal_order']
    trend_ = params['trend']
    for stock in data.columns:
        history_endog,history_exog,test_exog_,test_endog_,actuals= set_up_endog_exog(data,tt,stock)

        preds = [np.nan]*len(history_endog)
        for t in range(len(test_endog_)):
            model = sm.tsa.statespace.SARIMAX(endog = history_endog,exog = history_exog,
                order=order_,seasonal_order=seasonal_order_,trend=trend_,
                    time_varying_regression=False,mle_regression=True,initialization='approximate_diffuse',
                        hamilton_representation=False)

            model_fit = model.fit(disp=False)
            output = model_fit.forecast(exog = test_exog_[t])
            history_endog.append(test_endog_[t])
            history_exog.append(test_exog_[t])
            preds.append(output[0])
            
            if math.isnan(test_endog_[t]) == False:
                j_preds.append(output[0])
                acts.append(test_endog_[t])
        dates = np.append((data.index.min()-pd.DateOffset(days=1)),np.array(data.index.date))
        walking_preds = pd.DataFrame(zip(dates,actuals,preds),columns=['Date',f'{stock}_TODAY_ACTUAL',f'{stock}_TOMOROW_PRED'])
        walking_preds_list.append(walking_preds)
    walking_preds_all = pd.concat(walking_preds_list,axis=1).T.drop_duplicates().T
    return walking_preds_all,j_preds,acts

def walking_sarima(data,tt,params):
    # needs to be updated
    walking_preds_list=[]
    j_preds=[]
    acts=[]
    for stock in data.columns:
        X=data[stock].to_numpy()

        size = int(len(X)*tt)
        train, test = X[0:size],X[size:len(X)]
        #add an np.nan onto the end of train to represent the unknown tomorow
        test = np.append(test,np.nan)
                
        history = [x for x in train]

        preds = [np.nan]*len(train)

        order_ = params['order']
        seasonal_order_ = params['seasonal_order']
        trend_ = params['trend']
        for t in range(len(test)):
            model = sm.tsa.statespace.SARIMAX(history,order=order_,seasonal_order=seasonal_order_,trend=trend_)

            model_fit = model.fit(disp=False)
            output = model_fit.forecast()

            history.append(test[t])
            preds.append(output[0])
            
            if math.isnan(test[t]) == False:
                j_preds.append(output[0])
                acts.append(test[t])

        X = np.append(X,np.nan)
        dates = np.append(np.array(data.index.date),(data.index.max()+pd.DateOffset(days=1))) # add tomro
        walking_preds = pd.DataFrame(zip(dates,X,preds),columns=['Date',f'{stock}_TODAY_ACTUAL',f'{stock}_TOMOROW_PRED'])
        walking_preds_list.append(walking_preds)
    walking_preds_all = pd.concat(walking_preds_list,axis=1).T.drop_duplicates().T
    return walking_preds_all,j_preds,acts

def decide(output,stock,feature):
    # if next pred higher than current actual, hold, else, sell
    output = output[['Date',f'{stock}_TODAY_ACTUAL',f'{stock}_TOMOROW_PRED']].dropna()
    todo = []
    act = f'{stock}_TODAY_ACTUAL'
    pre = f'{stock}_TOMOROW_PRED'
    if feature == 'Close':
        for i in range(len(output)-1):
            if output.iloc[i][act] <= output.iloc[i+1][pre]: # if tomorow pred is bigger than todays actual
                todo.append('HOLD')
            else:
                todo.append('SELL')
    if feature == 'Change':
        for i in range(len(output)-1):
            if output.iloc[i+1][pre]>0: # if tomorow tomorrow predicted day change is positive, hold
                todo.append('HOLD')
            else:
                todo.append('SELL')
    todo.append('?')
    output['Todo'] = todo
    return output


def run_test(info,feature):
    compare_list=[]
    for stock in stock_name:
        x = 100
        x2 = x
        x3 = x
        x4=x
        plann=[]
        hold=[]
        perfect=[]
        naive = []
        plan = decide(info,stock,feature)

        for i in range(1,len(plan)-1):
            row = plan.iloc[i]
            next_row = plan.iloc[i+1]
            last_row = plan.iloc[i-1]
            
            change = ((next_row[1]-row[1])/row[1])
            # using system
            if row.Todo =='HOLD':
                x = x + (x*change)
            # just holding
            x2 = x2+(x2*change)
            # if it was perfect
            if change >0:
                x3 = x3+(x3*change)
            # if positive today positive tmo
            if row[1]>last_row[1]:
                x4 = x4 + x4*change
            
            plann.append(x)
            hold.append(x2)
            perfect.append(x3)
            naive.append(x4)
        
        print(f'{stock}:')
        print(f'    -Perfect: {x3}$')
        print(f'    -Plan: {x}$')
        print(f'    -Hold: {x2}$')
        print(f'    -Naive: {x4}$')

        plan_frame = pd.DataFrame(zip(plan.Date,plann,['plan']*len(plann),[stock]*len(plann)),columns = ['date','val','type','stock'])
        hold_frame = pd.DataFrame(zip(plan.Date,hold,['hold']*len(plann),[stock]*len(plann)),columns = ['date','val','type','stock'])
        perfect_frame = pd.DataFrame(zip(plan.Date,perfect,['perfect']*len(plann),[stock]*len(plann)),columns = ['date','val','type','stock'])
        naive_frame = pd.DataFrame(zip(plan.Date,naive,['naive']*len(plann),[stock]*len(plann)),columns = ['date','val','type','stock'])

        compare= pd.concat([plan_frame,hold_frame,perfect_frame,naive_frame])
        compare_list.append(compare)
    all_compare = pd.concat(compare_list)

    all_compare['indicator'] = all_compare['type']+' '+all_compare['stock']
    plot = px.line(x=all_compare.date,y=all_compare.val,color=all_compare.indicator)
    all_compare = all_compare.drop('indicator',axis=1)

    return all_compare,plot

def rmse(p,a):
    return np.sqrt(mean_squared_error(p,a))

def quick_plot(data):
    px.line(data.set_index('date'))



